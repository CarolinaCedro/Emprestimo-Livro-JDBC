/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.application.view;


import org.application.controller.dao.AmigoDao;
import org.application.controller.dao.EditoraDao;
import org.application.controller.dao.EmprestimoDao;
import org.application.controller.dao.LivroDao;
import org.application.model.AmigoBean;
import org.application.model.EmprestimoBean;
import org.application.model.LivroBean;
import org.application.view.dialogAlerts.ConfirmDialog;
import org.application.view.dialogAlerts.ErrorMessageDialog;
import org.application.view.dialogAlerts.InfoMessageDialog;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class TelaEmprestimo extends javax.swing.JFrame {

    private JProgressBar progressBar;

    private DefaultTableModel modeloListaLivros = new DefaultTableModel();
    private Set<Integer> listLivrosIdsSelecionados = new HashSet<>();
    private Set<LivroBean> listaLivrosSelecionados = new HashSet<>();

    private DefaultTableModel modelo = new DefaultTableModel();
    private EmprestimoDao emprestimoDAO = new EmprestimoDao();

    /**
     * Creates new form TelaPrincipal
     */
    public TelaEmprestimo() {
        initComponents();
        initLabelTableLivros();
        initCustomComponents();
        popularTabelaLivros();
        popularTabela();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jCheckBox1 = new javax.swing.JCheckBox();
        lblDescricao = new javax.swing.JLabel();
        txtDescricao = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        lblAmigo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaClientes = new javax.swing.JTable();
        btnExcluir = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        txtIdAmigo = new javax.swing.JTextField();
        jComboBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaBooks = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        goBack = new javax.swing.JButton();
        btnBaixa = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuItemSair = new javax.swing.JMenu();
        jMenuItemSair = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenu1.setText("jMenu1");

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDescricao.setText("Descricao");

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        lblAmigo.setText("Amigo");

        tabelaClientes.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        tabelaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    tabelaClientesMouseClicked(evt);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        });
        jScrollPane1.setViewportView(tabelaClientes);

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        lblStatus.setFont(new java.awt.Font("Liberation Sans", 1, 15)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(0, 153, 0));
        lblStatus.setText("Selecione os livros a serem emprestados");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 1, 36)); // NOI18N
        jLabel1.setText("Emprestimos");

        jButton3.setText("Atualizar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        txtIdAmigo.setText("jTextField2");

        jComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Item 1", "Item 2", "Item 3", "Item 4"}));

        tabelaBooks.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelaBooks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    tabelaBooksMouseClicked(evt);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        });
        jScrollPane2.setViewportView(tabelaBooks);

        jButton2.setText("Limpar Selecão");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        goBack.setText("Voltar menu");
        goBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackActionPerformed(evt);
            }
        });

        btnBaixa.setText("Baixa");
        btnBaixa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baixaActionPerformed(evt);
            }
        });

        menuItemSair.setText("Opções");
        menuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSairActionPerformed(evt);
            }
        });

        jMenuItemSair.setText("Sair");
        jMenuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSairActionPerformed(evt);
            }
        });
        menuItemSair.add(jMenuItemSair);

        jMenuBar1.add(menuItemSair);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap(42, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(txtIdAmigo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(769, 769, 769))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(btnBaixa)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(goBack))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                .addGap(6, 6, 6)
                                                                .addComponent(btnSalvar)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(btnExcluir)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jScrollPane1)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jButton3)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                                                        .addComponent(jScrollPane2)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(lblAmigo)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(lblDescricao)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(64, 64, 64))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addGap(290, 290, 290))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(jLabel1)
                                .addGap(66, 66, 66)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblDescricao)
                                        .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(lblAmigo)
                                                        .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(14, 14, 14))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(lblStatus)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton2)
                                        .addComponent(btnSalvar)
                                        .addComponent(btnExcluir))
                                .addGap(36, 36, 36)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(goBack)
                                        .addComponent(btnBaixa))
                                .addGap(78, 78, 78)
                                .addComponent(txtIdAmigo, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void baixaActionPerformed(ActionEvent evt) {
        int linhaSelecionada = tabelaClientes.getSelectedRow();

        if (linhaSelecionada >= 0) {
            ConfirmDialog confirmDialog = new ConfirmDialog("Deseja realmente dar baixa neste Emprestimo?");
            confirmDialog.setVisible(true);

            if (confirmDialog.isConfirmed()) {
                Integer id = (Integer) tabelaClientes.getValueAt(linhaSelecionada, 0);
                EditoraDao.excluir(id);
                modelo.removeRow(linhaSelecionada);

                InfoMessageDialog infoMessageDialog = new InfoMessageDialog("Emprestimo arquivado com sucesso");
                infoMessageDialog.setVisible(true);

                limparCampos();
            }
        } else {
            ErrorMessageDialog errorMessageDialog = new ErrorMessageDialog("Nenhum emprestimo selecionado.");
            errorMessageDialog.setVisible(true);
        }
    }


    private void menuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSairActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuItemSairActionPerformed

    private void jMenuItemSairActionPerformed(java.awt.event.ActionEvent evt) {
        ConfirmDialog confirmDialog = new ConfirmDialog("Deseja sair da aplicação?");
        confirmDialog.setVisible(true);

        if (confirmDialog.isConfirmed()) {
            System.exit(0);
        }
    }


    private void popularTabela() {
        DefaultTableModel modelo = (DefaultTableModel) tabelaClientes.getModel();
        modelo.setRowCount(0); // Limpa a tabela

        List<EmprestimoBean> emprestimos = EmprestimoDao.listarTodosEmprestimosDetalhados();
        System.out.println("aaaa" + emprestimos);

        for (EmprestimoBean emprestimo : emprestimos) {
            // Formatar a data de empréstimo
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            String dataEmprestimoFormatada = dateFormat.format(emprestimo.getDataEmprestimo());

            // Formatar a data de devolução (adicionando 2 meses)
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(emprestimo.getDataDevolucao());
            calendar.add(Calendar.MONTH, 2);  // Adiciona 2 meses
            String dataDevolucaoFormatada = dateFormat.format(calendar.getTime());

            modelo.addRow(new Object[]{
                    emprestimo.getIdEmprestimo(),
                    dataEmprestimoFormatada,
                    emprestimo.getDescricao(),
                    emprestimo.getAmigo().getNome(),
                    emprestimo.getListaLivros().size(),
                    dataDevolucaoFormatada
            });
        }

        List<String> nomesAmigos = AmigoDao.listarNomesAmigos();

        DefaultComboBoxModel<String> comboModel = new DefaultComboBoxModel<>(nomesAmigos.toArray(new String[0]));
        jComboBox.setModel(comboModel);
    }


    private void popularTabelaLivros() {
        DefaultTableModel modelo = (DefaultTableModel) tabelaBooks.getModel();
        modelo.setRowCount(0); // Limpa a tabela

        Set<LivroBean> livros = LivroDao.listarTodasComStatusATIVO();
        System.out.println("aaaa" + livros);

        for (LivroBean livro : livros) {
            modelo.addRow(new Object[]{
                    livro.getIdLivro(),
                    livro.getTitulo(),
                    livro.getAutor_nome(),
                    livro.getEditora_nome()
            });
        }

//        List<String> nomesAmigos = AmigoDao.listarNomesAmigos();
//        DefaultComboBoxModel<String> comboModel = new DefaultComboBoxModel<>(nomesAmigos.toArray(new String[0]));
//        jComboBox.setModel(comboModel);
    }


    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {
//        this.listaLivrosSelecionados = new HashSet<>();


        String descricao = txtDescricao.getText();
        String status = "ATIVO";
        Date dataEmprestimo = new Date();
        Date dataDevolucao = new Date();


        if (!isCamposValidos(descricao, status)) {
            ErrorMessageDialog errorMessageDialog = new ErrorMessageDialog("Existem campos a serem preenchidos");
            errorMessageDialog.setVisible(true);
            return;
        }


        int linhaSelecionada = tabelaClientes.getSelectedRow();


        if (linhaSelecionada >= 0) {
            Integer idLivroSelecionado = (Integer) tabelaClientes.getValueAt(linhaSelecionada, 0);

            System.out.println("o carinha selecionado " + idLivroSelecionado);
            EmprestimoBean emprestimoUpdate = EmprestimoDao.buscarEmprestimoPorId(idLivroSelecionado);
            String amigoSelecionadoString = (String) jComboBox.getSelectedItem();


            AmigoBean amigoFilterSelectedUpdate = AmigoDao.getByName(amigoSelecionadoString);


            // Atualizar um empréstimo existente com base no ID
            EmprestimoBean emprestimo = new EmprestimoBean();
            emprestimo.setIdEmprestimo(idLivroSelecionado);
            emprestimo.setDataEmprestimo(emprestimoUpdate.getDataEmprestimo());
            emprestimo.setDataDevolucao(emprestimoUpdate.getDataDevolucao());
            emprestimo.setDescricao(descricao);
            emprestimo.setAmigo(amigoFilterSelectedUpdate);
            emprestimo.setStatus(emprestimoUpdate.getStatus());


            // Atualizar a lista de livros
            emprestimo.setListaLivros(listaLivrosSelecionados);

            boolean isAtualizado = EmprestimoDao.atualizar(emprestimo);

            if (isAtualizado) {

                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                String dataEmprestimoFormatada = dateFormat.format(emprestimo.getDataEmprestimo());

                // Formatar a data de devolução (adicionando 2 meses)
                Calendar calendar = Calendar.getInstance();
                calendar.setTime(emprestimo.getDataDevolucao());
                calendar.add(Calendar.MONTH, 2);  // Adiciona 2 meses
                String dataDevolucaoFormatada = dateFormat.format(calendar.getTime());

                modelo.setValueAt(emprestimo.getIdEmprestimo(), linhaSelecionada, 0);
                modelo.setValueAt(dataEmprestimoFormatada, linhaSelecionada, 1);
                modelo.setValueAt(emprestimo.getDescricao(), linhaSelecionada, 2);
                modelo.setValueAt(emprestimo.getAmigo().getNome(), linhaSelecionada, 3);
                modelo.setValueAt(emprestimo.getListaLivros().size(), linhaSelecionada, 4);
                modelo.setValueAt(dataDevolucaoFormatada, linhaSelecionada, 5);
                tabelaBooks.clearSelection();
                limparCampos();
            } else {
                ErrorMessageDialog errorMessageDialog = new ErrorMessageDialog("Erro ao atualizar o empréstimo");
                errorMessageDialog.setVisible(true);
            }


        } else {

            String amigoSelecionadoString = (String) jComboBox.getSelectedItem();

            AmigoBean amigoFilterSelected = AmigoDao.getByName(amigoSelecionadoString);
            System.out.println("amigo que eu filtro antes de mandar" + amigoFilterSelected);

            System.out.println("listas" + listaLivrosSelecionados);


            // Criar um novo empréstimo, pois nenhum empréstimo está selecionado na tabela
            EmprestimoBean emprestimo = new EmprestimoBean(null, dataEmprestimo, dataDevolucao, descricao, listaLivrosSelecionados, amigoFilterSelected, status);

            // Adicionando mais mensagens de depuração
            System.out.println("Objeto Empréstimo: " + emprestimo);

            boolean isCadastrado = EmprestimoDao.inserirEmprestimo(emprestimo);

            if (!isCadastrado) {
                System.out.println("Objeto Empréstimo: " + emprestimo);

                int idEmprestimo = EmprestimoDao.getLastInsertedId();
                EmprestimoBean emprestimoInserido = EmprestimoDao.buscarEmprestimoPorId(idEmprestimo);

                // Adicionando mensagens de depuração
                System.out.println("ID do Empréstimo Inserido: " + idEmprestimo);
                System.out.println("Empréstimo Inserido: " + emprestimoInserido);

                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                String dataEmprestimoFormatada = dateFormat.format(emprestimo.getDataEmprestimo());

                // Formatar a data de devolução (adicionando 2 meses)
                Calendar calendar = Calendar.getInstance();
                calendar.setTime(emprestimo.getDataDevolucao());
                calendar.add(Calendar.MONTH, 2);  // Adiciona 2 meses
                String dataDevolucaoFormatada = dateFormat.format(calendar.getTime());

                modelo.addRow(new Object[]{
                        emprestimoInserido.getIdEmprestimo(),
                        dataEmprestimoFormatada,
                        emprestimoInserido.getDescricao(),
                        emprestimoInserido.getAmigo().getNome(),
                        emprestimoInserido.getListaLivros().size(),
                        dataDevolucaoFormatada
                });

                limparCampos();
            } else {
                InfoMessageDialog infoMessageDialog = new InfoMessageDialog("Empréstimo já se encontra cadastrado");
                infoMessageDialog.setVisible(true);
            }

        }


    }



    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int linhaSelecionada = tabelaClientes.getSelectedRow();

        if (linhaSelecionada >= 0) {
            ConfirmDialog confirmDialog = new ConfirmDialog("Deseja realmente dar baixa neste Empréstimo?");
            confirmDialog.setVisible(true);

            if (confirmDialog.isConfirmed()) {
                Integer id = (Integer) tabelaClientes.getValueAt(linhaSelecionada, 0);
                this.emprestimoDAO.darBaixa(id);
                modelo.removeRow(linhaSelecionada);

                InfoMessageDialog infoMessageDialog = new InfoMessageDialog("Empréstimo baixado com sucesso");
                infoMessageDialog.setVisible(true);

                limparCampos();
            }
        } else {
            ErrorMessageDialog errorMessageDialog = new ErrorMessageDialog("Nenhum Empréstimo selecionado.");
            errorMessageDialog.setVisible(true);
        }



    }//GEN-LAST:event_btnExcluirActionPerformed


    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void atualizarTabela(List<EmprestimoBean> emprestimos) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaClientes.getModel();
        modelo.setRowCount(0); // Limpa a tabela


        for (EmprestimoBean emprestimo : emprestimos) {

            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            String dataEmprestimoFormatada = dateFormat.format(emprestimo.getDataEmprestimo());

            // Formatar a data de devolução (adicionando 2 meses)
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(emprestimo.getDataDevolucao());
            calendar.add(Calendar.MONTH, 2);
            String dataDevolucaoFormatada = dateFormat.format(calendar.getTime());

            modelo.addRow(new Object[]{
                    emprestimo.getIdEmprestimo(),
                    dataEmprestimoFormatada,
                    emprestimo.getDescricao(),
                    emprestimo.getAmigo().getNome(),
                    emprestimo.getListaLivros().size(),
                    dataDevolucaoFormatada
            });
        }
    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String filtroNome = jTextField1.getText(); // Obtenha o texto do campo de filtro
        System.out.println("nome que será filtrado" + filtroNome);

        // Crie uma instância de SwingWorker para executar a busca por nome em segundo plano
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                // Realize a busca por nome e atualize a tabela com os resultados
                List<EmprestimoBean> emprestimosFiltrado = EmprestimoDao.buscarEmprestimoPorDescricao(filtroNome);

                // Atualize a tabela na UI thread
                SwingUtilities.invokeLater(() -> {
                    atualizarTabela(emprestimosFiltrado);
                });

                return null;
            }
        };

        worker.execute(); // Inicie a execução do SwingWorker
    }//GEN-LAST:event_jButton1ActionPerformed


    private void tabelaClientesMouseClicked(java.awt.event.MouseEvent evt) throws Exception {
        int linhaSelecionada = tabelaClientes.getSelectedRow();
        Integer idAmigo = (Integer) tabelaClientes.getValueAt(linhaSelecionada, 0);

        tabelaBooks.clearSelection();
        tabelaBooks.getSelectionForeground().brighter();
        this.listLivrosIdsSelecionados = new HashSet<>();
        this.listaLivrosSelecionados = new HashSet<>();
        System.out.println("Limpando seleção" + this.listLivrosIdsSelecionados);

        try {
            EmprestimoBean emprestimo = EmprestimoDao.buscarEmprestimoPorId(idAmigo);
            AmigoBean amigoSelecionado = emprestimo.getAmigo();
            // Obtendo a lista de amigos (nomes)
            List<String> nomesAmigos = AmigoDao.listarNomesAmigos();

            // Configurando o modelo do JComboBox
            DefaultComboBoxModel<String> comboModel = new DefaultComboBoxModel<>(nomesAmigos.toArray(new String[0]));
            jComboBox.setModel(comboModel);


            popularTabelaLivrosSet(LivroDao.listarTodasComStatusATIVO());

            txtDescricao.setText(emprestimo.getDescricao());
            System.out.println("traz o livro" + emprestimo);
        } catch (Exception err) {
            throw new Exception(err);
        }
    }

    private void popularTabelaLivrosSet(Set<LivroBean> livros) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaBooks.getModel();
        modelo.setRowCount(0); // Limpa a tabela

        for (LivroBean livro : livros) {
            modelo.addRow(new Object[]{
                    livro.getIdLivro(),
                    livro.getTitulo(),
                    livro.getAutor_nome(),
                    livro.getEditora_nome()
            });
        }
    }


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        tabelaBooks.clearSelection();
        tabelaBooks.getSelectionForeground().brighter();
        this.listLivrosIdsSelecionados = new HashSet<>();
        this.listaLivrosSelecionados = new HashSet<>();
        System.out.println("Limpando seleção" + this.listLivrosIdsSelecionados);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void goBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackActionPerformed
        PrincipalJFrame emprestimoView = new PrincipalJFrame();
        emprestimoView.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_goBackActionPerformed

    private void DevolucaoActionPerformed(java.awt.event.ActionEvent evt) {

    }

    private void tabelaBooksMouseClicked(java.awt.event.MouseEvent evt) throws Exception {
        int[] linhasSelecionadas = tabelaBooks.getSelectedRows();
        System.out.println("linhas selecionadas" + linhasSelecionadas.length);

        if (linhasSelecionadas.length > 0) {
            for (int linhaSelecionada : linhasSelecionadas) {
                Integer IDlivro = (Integer) tabelaBooks.getValueAt(linhaSelecionada, 0);
                System.out.println("o id" + IDlivro);

                // Adiciona o ID do livro ao ArrayList
                listLivrosIdsSelecionados.add(IDlivro);
                System.out.println("os ids que estamos adicionando" + IDlivro);
            }

            listLivrosIdsSelecionados.forEach(System.out::println);

            System.out.println("mdssss tá setando todos os ids" + this.listLivrosIdsSelecionados);
            // Agora, para cada ID de livro, busca o livro e adiciona à lista
            for (Integer idLivro : listLivrosIdsSelecionados) {
                try {
                    LivroBean livro = LivroDao.buscarLivroPorId(idLivro);
                    this.listaLivrosSelecionados.add(livro);

                    System.out.println("traz o livro" + livro);
                } catch (RuntimeException err) {
                    System.out.println(err);
                }
            }

            listaLivrosSelecionados.forEach(System.out::println);

            System.out.println("livros selecionados" + this.listaLivrosSelecionados);
        } else {
            System.out.println("Nenhuma linha selecionada.");
        }
    }


    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {

        this.popularTabela();


    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaEmprestimo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBaixa;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton goBack;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItemSair;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblAmigo;
    private javax.swing.JLabel lblDescricao;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JMenu menuItemSair;
    private javax.swing.JTable tabelaBooks;
    private javax.swing.JTable tabelaClientes;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtIdAmigo;
    // End of variables declaration//GEN-END:variables

    private boolean isCamposValidos(String... campos) {
        for (String campo : campos) {
            if (campos == null || "".equals(campo)) {
                return false;
            }
        }
        return true;
    }

    private void initCustomComponents() {
        modelo.addColumn("ID");
        modelo.addColumn("Dta. EMPRESTIMO");
        modelo.addColumn("DESCRICAO");
        modelo.addColumn("AMIGO");
        modelo.addColumn("QTD LIVROS EMPRESTADOS");
        modelo.addColumn("DATA EST. DEVOLUCAO");

        tabelaClientes.setModel(modelo);
    }

    private void initLabelTableLivros() {
        modeloListaLivros.addColumn("ID");
        modeloListaLivros.addColumn("TITULO");
        modeloListaLivros.addColumn("AUTOR");
        modeloListaLivros.addColumn("EDITORA");

        tabelaClientes.setModel(modeloListaLivros);
    }

    private void limparCampos() {
        txtIdAmigo.setText("");
        txtDescricao.setText("");
    }
}
